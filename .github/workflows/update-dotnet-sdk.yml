# This workflow uses the martincostello/update-dotnet-sdk and the dotnet-outdated
# global tool to update the .NET SDK and Microsoft-published NuGet packages for
# the application in this repository to the latest patch version on a weekly basis.

name: update-dotnet-sdk

# Using a real user/email is recommended instead of using GITHUB_TOKEN, otherwise pull
# requests opened by this workflow, and commits pushed, will not queue your CI status checks.
# Similarly, the approve-and-merge workflow will also not run if GITHUB_TOKEN is used.
# See https://docs.github.com/en/actions/using-workflows/triggering-a-workflow#triggering-a-workflow-from-a-workflow
# The Git commit user name and email are set as variables in the organization/repository settings.
# See https://docs.github.com/en/actions/learn-github-actions/variables
env:
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GIT_COMMIT_USER_EMAIL: ${{ vars.GIT_COMMIT_USER_EMAIL }}
  GIT_COMMIT_USER_NAME: ${{ vars.GIT_COMMIT_USER_NAME }}
  TERM: xterm

on:
  # Run at 2100 UTC on Tuesday every week to pick up any updates from
  # Patch Tuesday which occur on the second Tuesday of the month (PST).
  schedule:
    - cron:  '00 21 * * TUE'
  # Also support running the workflow manually on-demand.
  workflow_dispatch:

jobs:

  update-dotnet-sdk:

    name: Update .NET SDK
    runs-on: ubuntu-latest
    # We don't want anyone forking this repository to also run this workflow
    if: ${{ github.event.repository.fork == false }}

    steps:

    # Checkout the repository so the global.json file can be inspected and
    # updated if a new patch version of the SDK is available. The token is
    # iused so that the workflow can push any changes back to the repository
    # and that pushes as that user trigger any CI workflows that may trigger
    # on push, such as if any NuGet packages are updated after the PR is opened.
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ env.ACCESS_TOKEN }}

    # Run the action to check if a new version of the .NET SDK is available
    # for the same release channel as the SDK specified in global.json.
    - name: Update .NET SDK
      id: update-dotnet-sdk
      uses: martincostello/update-dotnet-sdk@v2
      with:
        labels: "dependencies,.NET"
        repo-token: ${{ env.ACCESS_TOKEN }}
        user-email: ${{ env.GIT_COMMIT_USER_EMAIL }}
        user-name: ${{ env.GIT_COMMIT_USER_NAME }}

    # If the action updated the .NET SDK, then install the .NET SDK and then
    # run the dotnet-outdated global tool to update any Microsoft-published
    # NuGet packages for that patch release of .NET to their latest versions too.
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      if : ${{ steps.update-dotnet-sdk.outputs.sdk-updated == 'true' }}

    - name: Update NuGet packages
      if : ${{ steps.update-dotnet-sdk.outputs.sdk-updated == 'true' }}
      shell: pwsh
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_NOLOGO: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
        NUGET_XMLDOC_MODE: skip
      run: |
        $ErrorActionPreference = "Stop"

        dotnet tool install --global dotnet-outdated-tool

        $tempPath = [System.IO.Path]::GetTempPath()
        $updatesPath = (Join-Path $tempPath "dotnet-outdated.json")

        Write-Host "Checking for .NET NuGet package(s) to update..."

        # The --version-lock Major option is used to only update packages
        # to the latest patch version of the current major version.
        # The --include flags are used to only update Microsoft-published
        # NuGet packages that are typically published with a new patch
        # release of .NET that accompanies a new .NET SDK release.
        dotnet outdated `
          --upgrade `
          --version-lock Major `
          --output $updatesPath `
          --include "Microsoft.AspNetCore." `
          --include "Microsoft.EntityFrameworkCore." `
          --include "Microsoft.Extensions." `
          --include "System."

        $dependencies = @()

        # Determine the distinct set of package updates that were applied, if any.
        if (Test-Path $updatesPath) {
          $dependencies = `
            Get-Content -Path $updatesPath | `
            ConvertFrom-Json | `
            Select-Object -ExpandProperty projects | `
            Select-Object -ExpandProperty TargetFrameworks | `
            Select-Object -ExpandProperty Dependencies | `
            Sort-Object -Property Name -Unique
        }

        if ($dependencies.Count -gt 0) {
          Write-Host "Found $($dependencies.Count) .NET NuGet package(s) to update." -ForegroundColor Green

          $commitMessageLines = @()

          # Generate the commit message in a way that contains metadata similar to the way
          # commit messages from dependabot updates are generated so that the approve-and-merge
          # workflow can parse the commits to determine which packages were updated so that
          # it can determine whether or not it is appropriate to approve the PR and then
          # automatically merge it if the required statuses for the pull request are successful.
          if ($dependencies.Count -eq 1) {
            $commitMessageLines += "Bump $($dependencies[0].Name) from $($dependencies[0].ResolvedVersion) to $($dependencies[0].LatestVersion)"
            $commitMessageLines += ""
            $commitMessageLines += "Bumps $($dependencies[0].Name) from $($dependencies[0].ResolvedVersion) to $($dependencies[0].LatestVersion)."
          } else {
            $commitMessageLines += "Bump .NET NuGet packages"
            $commitMessageLines += ""
            $commitMessageLines += "Bumps .NET dependencies to their latest versions for the .NET ${{ steps.update-dotnet-sdk.outputs.sdk-version }} SDK."
            $commitMessageLines += ""
            foreach ($dependency in $dependencies) {
              $commitMessageLines += "Bumps $($dependency.Name) from $($dependency.ResolvedVersion) to $($dependency.LatestVersion)."
            }
          }

          $commitMessageLines += ""
          $commitMessageLines += "---"
          $commitMessageLines += "updated-dependencies:"

          foreach ($dependency in $dependencies) {
            $commitMessageLines += "- dependency-name: $($dependency.Name)"
            $commitMessageLines += "  dependency-type: direct:production"
            $commitMessageLines += "  update-type: version-update:semver-$($dependency.UpgradeSeverity.ToLowerInvariant())"
          }

          $commitMessageLines += "..."
          $commitMessageLines += ""
          $commitMessageLines += ""

          $commitMessage = $commitMessageLines -join "`n"

          git config user.email "${{ env.GIT_COMMIT_USER_EMAIL }}"
          git config user.name "${{ env.GIT_COMMIT_USER_NAME }}"

          git add .
          git commit -m $commitMessage
          git push

          Write-Host "Pushed update to $($dependencies.Count) NuGet package(s)." -ForegroundColor Green
        }
        else {
          Write-Host "There are no .NET NuGet packages to update." -ForegroundColor Green
        }
