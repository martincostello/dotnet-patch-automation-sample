name: approve-and-merge

on: pull_request_target

permissions:
  contents: read
  pull-requests: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      github.event.pull_request.user.login == 'github-actions[bot]' ||
      github.event.pull_request.user.login == vars.GIT_COMMIT_USER_NAME

    steps:

    - name: Install powershell-yaml
      shell: pwsh
      run: Install-Module -Name powershell-yaml -Force -MaximumVersion "0.4.7"

    - name: Check if Microsoft or System dependencies
      id: check-dependencies
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        # Replicate the logic in the dependabot/fetch-metadata action.
        # See https://github.com/dependabot/fetch-metadata/blob/aea2135c95039f05c64436f1d14638c300e10b2b/src/dependabot/update_metadata.ts#L29-L68.
        $commits = gh api `
          /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/commits `
          --jq '.[] | { author: .author.login, message: .commit.message }' | ConvertFrom-Json

        $dependencies = @()

        foreach ($commit in $commits) {
          $match = [Regex]::Match($commit.Message, '(?m)^-{3}\s(?<dependencies>[\S|\s]*?)\s^\.{3}$')
          if ($match.Success -eq $True) {
            $metadata = ($match.Value | ConvertFrom-Yaml -Ordered)
            $updates = $metadata["updated-dependencies"]
            if ($updates) {
              foreach ($update in $updates) {
                $dependencies += @{
                  Name = $update['dependency-name'];
                  Type = $update['update-type'];
                }
              }
            }
          }
        }

        $isPatch = $dependencies.Length -gt 0
        $onlyTrusted = $dependencies.Length -gt 0

        foreach ($dependency in $dependencies) {
          $isPatch = $isPatch -And $dependency.Type -eq "version-update:semver-patch"
          $onlyTrusted = $onlyTrusted -And
            (
              ($dependency.Name -eq "Microsoft.NET.Sdk") -Or
              $dependency.Name.StartsWith('Microsoft.AspNetCore.') -Or
              $dependency.Name.StartsWith('Microsoft.EntityFrameworkCore.') -Or
              $dependency.Name.StartsWith('Microsoft.Extensions.') -Or
              $dependency.Name.StartsWith('System.')
            )
        }

        $isTrusted = $onlyTrusted -And $isPatch
        "is-trusted-update=$isTrusted" >> $env:GITHUB_OUTPUT

    # TODO Remove review if the PR is not a trusted update.

    - name: Checkout code
      uses: actions/checkout@v3
      if: ${{ steps.check-dependencies.outputs.is-trusted-update }}

    - name: Approve pull request and enable auto-merge
      if: ${{ steps.check-dependencies.outputs.is-trusted-update }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_URL: ${{ github.event.pull_request.html_url }}
      shell: bash
      run: |
        gh pr checkout "$PR_URL"
        if [ "$(gh pr status --json reviewDecision -q .currentBranch.reviewDecision)" != "APPROVED" ];
        then gh pr review --approve "$PR_URL" && gh pr merge --auto --merge "$PR_URL"
        else echo "PR already approved.";
        fi
